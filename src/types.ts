import type { Tables, TablesInsert } from "./db/database.types"

// ============================================================================
// Database Entity-based Types
// ============================================================================

/** Represents a recipe record from the 'recipes' table. */
export type Recipe = Tables<"recipes">

/** Represents an ingredient record from the 'ingredients' table. */
export type Ingredient = Tables<"ingredients">

/** Represents a step record from the 'steps' table. */
export type Step = Tables<"steps">

/** Represents a tag record from the 'tags' table. */
export type Tag = Tables<"tags">

// ============================================================================
// API Command Models (for POST, PUT, PATCH requests)
// ============================================================================

/** Helper type for ingredients in create/update commands. Does not have an ID. */
export type RecipeIngredientCommand = Pick<
  TablesInsert<"ingredients">,
  "content" | "position"
>

/** Helper type for steps in create/update commands. Does not have an ID. */
export type RecipeStepCommand = Pick<
  TablesInsert<"steps">,
  "content" | "position"
>

/**
 * Command model for creating a new recipe.
 * Based on `POST /api/recipes`.
 */
export type CreateRecipeCommand = {
  name: Recipe["name"]
  description: Recipe["description"]
  generationId?: Recipe["generation_id"]
  ingredients: RecipeIngredientCommand[]
  steps: RecipeStepCommand[]
  tags: string[]
}

/** Helper type for ingredients in update command. ID is optional for new items. */
export type UpdateRecipeIngredientCommand = RecipeIngredientCommand &
  Partial<Pick<Ingredient, "id">>

/** Helper type for steps in update command. ID is optional for new items. */
export type UpdateRecipeStepCommand = RecipeStepCommand & Partial<Pick<Step, "id">>

/**
 * Command model for updating an existing recipe.
 * Based on `PUT /api/recipes/{id}`.
 */
export type UpdateRecipeCommand = {
  name: Recipe["name"]
  description: Recipe["description"]
  ingredients: UpdateRecipeIngredientCommand[]
  steps: UpdateRecipeStepCommand[]
  tags: string[]
}

/**
 * Command model for generating a recipe from text.
 * Based on `POST /api/recipes/generate`.
 */
export type GenerateRecipeCommand = {
  inputText: TablesInsert<"generation">["input_text"]
}

// ============================================================================
// API Data Transfer Objects (DTOs) (for GET responses)
// ============================================================================

/**
 * DTO for a recipe item in a list.
 * Based on `GET /api/recipes`.
 */
export type RecipeListItemDto = Pick<Recipe, "id" | "name" | "description"> & {
  tags: string[]
}

/**
 * DTO for a paginated list of recipes.
 */
export type PaginatedRecipesDto = {
  data: RecipeListItemDto[]
  pagination: {
    page: number
    pageSize: number
    totalItems: number
    totalPages: number
  }
}

/** Helper DTO for an ingredient within a full recipe view. */
export type RecipeIngredientDto = Pick<Ingredient, "id" | "content" | "position">

/** Helper DTO for a step within a full recipe view. */
export type RecipeStepDto = Pick<Step, "id" | "content" | "position">

/**
 * DTO for a single, detailed recipe.
 * Based on `GET /api/recipes/{id}`.
 */
export type RecipeDetailDto = Pick<Recipe, "id" | "name" | "description"> & {
  ingredients: RecipeIngredientDto[]
  steps: RecipeStepDto[]
  tags: string[]
}

/**
 * DTO for a tag.
 * Based on `GET /api/tags`.
 */
export type TagDto = Pick<Tag, "id" | "name">

/**
 * DTO for a recipe generated by AI.
 * This is the structured, unsaved recipe data.
 * Based on `POST /api/recipes/generate` response.
 */
export type GeneratedRecipeDto = {
  generationId: Tables<"generation">["id"]
  name: Recipe["name"]
  description: Recipe["description"]
  ingredients: RecipeIngredientCommand[]
  steps: RecipeStepCommand[]
}
